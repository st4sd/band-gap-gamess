
# Copyright IBM Inc. 2015, 2019. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
# Author(s):
#   James McDonagh
#   Michael Johnston
#   Vassilis Vassiliadis

interface:
  description: "Measures band-gap and related properties of small molecules in gas-phase using semi-empirical quantum methods"
  inputSpec:
    namingScheme: "SMILES"
    inputExtractionMethod:
      hookGetInputIds:
        source:
          path: "input/input_smiles.csv"
  propertiesSpec:
    - name: "band-gap"
      description: "The difference between homo and lumo in electron-volts"
      propertyExtractionMethod:
        hookGetProperties:
          source:
            keyOutput: "OptimisationResults"
    - name: "homo"
      description: "The energy of the highest occupied molecular orbital in electron-volts"
      propertyExtractionMethod:
        hookGetProperties:
          source:
            keyOutput: "OptimisationResults"
    - name: "lumo"
      description: "The energy of the lowest unoccupied molecular orbital in electron-volts"
      propertyExtractionMethod:
        hookGetProperties:
          source:
            keyOutput: "OptimisationResults"
    - name: "electric-moments"
      description: "The dipole moment in debyes"
      propertyExtractionMethod:
        hookGetProperties:
          source:
            keyOutput: "OptimisationResults"
    - name: "total-energy"
      description: "The total energy of the molecule in electron-volts"
      propertyExtractionMethod:
        hookGetProperties:
          source:
            keyOutput: "OptimisationResults"

status-report:
  0:
    arguments: '1'
    executable: echo
    stage-weight: 0.1
  1:
    arguments: '1'
    executable: echo
    stage-weight: 0.9
output:
  OptimisationResults:
    data-in: stage1.ExtractEnergies/energies.csv:ref
    description: homo/lumo results
    type: csv

platforms:
- default
- openshift
- openshift-kubeflux
- openshift-cpu

blueprint:
  openshift-kubeflux:
    global:
      resourceManager:
        kubernetes:
          podSpec:
            schedulerName: kubeflux

environments:
  # Platforms that do not override the environments, use the ones that default definess
  default:
    GAMESS:
      #GMSPATH: /gamess/
      PATH: /usr/local/bin/:$PATH
      VERNO: "00"
    PYTHON: {}

  openshift-cpu:
    GAMESS:
      GMSPATH: /gamess/
      PATH: /gamess/:$PATH

components:

  ## This component updates a general GAMESS US input file template to have a particular basis set
- stage: 0
  name: SetBasis
  command:
    arguments: sed -i'.bak' -e 's/#BASIS#/%(basis)s/g' input_molecule.txt
    interpreter: bash
  references:
  - data/input_molecule.txt:copy
- stage: 0
  name: GetMoleculeIndex
  command:
    arguments: -c \"print(%(startIndex)s + %(replica)s),\"
    executable: python
  workflowAttributes:
    replicate: '%(numberMolecules)s'

  ## Note row is used to name the output sdf and xyz files used later make the input files. This will give each one a unique name
  ## over the replicas here
- stage: 0
  name: SMILESToXYZ
  command:
    arguments: --input input_smiles.csv --row GetMoleculeIndex:output
    environment: python
    executable: bin/rdkit_smiles2coordinates.py
  references:
  - input/input_smiles.csv:copy
  - GetMoleculeIndex:output
  resourceManager:
    config:
      backend: '%(backend)s'
    kubernetes:
      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1

  ## This component takes the path to xyz and sdf files (-xp and -sp) and the names of the files which in this case is
  ## the row number in both cases. '.xyz' and '.sdf' are added in the code. The GAMESS input file is read from the
  ## updated template in SetFunctional. The output is a GAMESS US input file.
- stage: 0
  name: XYZToGAMESS
  command:
    arguments: -xp stage0.SMILESToXYZ:ref -xf GetMoleculeIndex:output 
      -g stage0.SetBasis/input_molecule.txt:ref -sp stage0.SMILESToXYZ:ref 
      -sf GetMoleculeIndex:output
    environment: python
    executable: bin/make_gamess_input_from_template_and_xyz.py
  references:
  - stage0.SMILESToXYZ:ref
  - stage0.SetBasis/input_molecule.txt:ref
  - GetMoleculeIndex:output
  resourceManager:
    config:
      backend: '%(backend)s'
    kubernetes:
      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1
  ## This runs a geometry optimization using GAMESS US
- stage: 1
  name: GeometryOptimisation
  command:
    arguments: molecule.inp %(gamess-version)s %(number-processors)s
    environment: gamess
    executable: "%(gamess-command)s"
  references:
  - stage0.XYZToGAMESS/molecule.inp:copy
  workflowAttributes:
    restartHookFile: "%(gamess-restart-hook-file)s"
    restartHookOn:
    - KnownIssue
    - Success
    - ResourceExhausted
    shutdownOn:
    - KnownIssue
    - ResourceExhausted
  resourceManager:
    config:
      backend: '%(backend)s'
      walltime: "%(gamess-walltime-minutes)s"
    kubernetes:
      gracePeriod: "%(gamess-grace-period-seconds)s"
      image: "%(gamess-image)s"
  resourceRequest:
    memory: '%(mem)s'
    numberThreads: '%(number-processors)s'
    threadsPerCore: 1
    gpus: '%(gamess-gpus)s'

  ## Gets the label given by users from the input csv file of smiles and puts it with the caluclation information
- stage: 1
  name: CreateLabels
  command:
    arguments: >-
      -c "import pandas; 
      input_file='input/input_smiles.csv:ref'; 
      row_indices='stage0.GetMoleculeIndex:output'; 
      m=pandas.read_csv(input_file, engine='python', sep=None); 
      print(','.join([str(m.iloc[int(index)]['%(collabel)s']) for index in row_indices.split()]))"
    expandArguments: "none"
    executable: python
  references:
  - stage0.GetMoleculeIndex:output
  - input/input_smiles.csv:ref
  workflowAttributes:
    aggregate: true

  ## Gets the energy terms of interest from a GAMESS US calculation
- stage: 1
  name: ExtractEnergies
  command:
    arguments: -l CreateLabels:output GeometryOptimisation:ref
    environment: python
    executable: bin/extract_gmsout.py
  references:
  - GeometryOptimisation:ref
  - CreateLabels:output
  workflowAttributes:
    aggregate: true
  resourceManager:
    config:
      backend: '%(backend)s'
    kubernetes:
      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1
variables:
  default:
    global:
      # VV: References python script in hooks directory to use for restartHook of GeometryOptimisation
      gamess-restart-hook-file: semi_empirical_restart.py
      gamess-image: nvcr.io/hpc/gamess:17.09-r2-libcchem
      gamess-command: bin/run-gamess.sh
      mem: '4295000000'
      backend: local
      number-processors: '8'
      startIndex: '0'
      numberMolecules: '1'
      basis: GBASIS=PM3
      collabel: label
      # VV: how long k8s should let the pod run before it sends it a SIGTERM
      gamess-walltime-minutes: 700
      # VV: how long k8s should wait between SIGTERM and SIGKILL
      gamess-grace-period-seconds: 1800
      gamess-gpus: 0
      # The GAMESS US version in the nvidia image is 00
      gamess-version: "00"
    stages:
      0:
        stage-name: SMILES_to_GAMESS
      1:
        stage-name: GeometryOptimisationRun
  openshift:
    global:
      backend: kubernetes
  openshift-kubeflux:
    global:
      backend: kubernetes
  openshift-cpu:
    global:
      backend: kubernetes
      gamess-restart-hook-file: cpu_semi_empirical_restart.py
      gamess-image: docker-na-public.artifactory.swg-devops.com/res-st4sd-community-team-applications-docker-virtual/gamess-st4sd:2019.11.30
      gamess-command: rungms
      # The GAMESS US version in the CPU optimized image is 01
      gamess-version: "01"